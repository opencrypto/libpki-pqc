diff --git a/Configure b/Configure
index b286dd0678..853e8853e1 100755
--- a/Configure
+++ b/Configure
@@ -327,7 +327,7 @@ $config{sdirs} = [
     "bn", "ec", "rsa", "dsa", "dh", "sm2", "dso", "engine",
     "buffer", "bio", "stack", "lhash", "rand", "err",
     "evp", "asn1", "pem", "x509", "x509v3", "conf", "txt_db", "pkcs7", "pkcs12", "comp", "ocsp", "ui",
-    "cms", "ts", "srp", "cmac", "ct", "async", "kdf", "store"
+    "cms", "ts", "srp", "cmac", "ct", "async", "kdf", "store", "oqs", "composite"
     ];
 # test/ subdirectories to build
 $config{tdirs} = [ "ossl_shim" ];
@@ -359,6 +359,7 @@ my @disablables = (
     "cmac",
     "cms",
     "comp",
+    "composite",
     "crypto-mdebug",
     "crypto-mdebug-backtrace",
     "ct",
diff --git a/crypto/asn1/standard_methods.h b/crypto/asn1/standard_methods.h
index 9e29c85e36..295e4c0734 100644
--- a/crypto/asn1/standard_methods.h
+++ b/crypto/asn1/standard_methods.h
@@ -103,4 +103,7 @@ static const EVP_PKEY_ASN1_METHOD *standard_methods[] = {
     &p256_sphincsshake256128frobust_asn1_meth,
     &rsa3072_sphincsshake256128frobust_asn1_meth,
 ///// OQS_TEMPLATE_FRAGMENT_SIG_ASN1_METHS_END
+#ifndef OPENSSL_NO_COMPOSITE
+    &composite_asn1_meth,
+#endif
 };
diff --git a/crypto/ec/build.info b/crypto/ec/build.info
index 62d81cb7bb..a1e673e347 100644
--- a/crypto/ec/build.info
+++ b/crypto/ec/build.info
@@ -8,7 +8,6 @@ SOURCE[../../libcrypto]=\
         ecdsa_ossl.c ecdsa_sign.c ecdsa_vrf.c curve25519.c ecx_meth.c \
         curve448/arch_32/f_impl.c curve448/f_generic.c curve448/scalar.c \
         curve448/curve448_tables.c curve448/eddsa.c curve448/curve448.c \
-	oqs_meth.c \
         {- $target{ec_asm_src} -}
 
 GENERATE[ecp_nistz256-x86.s]=asm/ecp_nistz256-x86.pl \
diff --git a/crypto/evp/m_sigver.c b/crypto/evp/m_sigver.c
index 04643acc88..5ca3a54332 100644
--- a/crypto/evp/m_sigver.c
+++ b/crypto/evp/m_sigver.c
@@ -38,7 +38,7 @@ static int do_sigver_init(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
                 type = EVP_get_digestbynid(def_nid);
         }
 
-        if (type == NULL) {
+        if (!(ctx->pctx->pmeth->flags & EVP_PKEY_FLAG_NO_MD) && type == NULL) {
             EVPerr(EVP_F_DO_SIGVER_INIT, EVP_R_NO_DEFAULT_DIGEST);
             return 0;
         }
@@ -73,15 +73,23 @@ static int do_sigver_init(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
         *pctx = ctx->pctx;
     if (ctx->pctx->pmeth->flags & EVP_PKEY_FLAG_SIGCTX_CUSTOM)
         return 1;
-    if (!EVP_DigestInit_ex(ctx, type, e))
+    
+    /*
+     * MAX: My point of view is that the digest_custom should be
+     *      called, if provided, otherwise initialize the CTX
+     */
+
+    // Initializes only if there is a digest to initialize
+    if ((type != NULL) && (!EVP_DigestInit_ex(ctx, type, e)))
         return 0;
+
     /*
      * This indicates the current algorithm requires
      * special treatment before hashing the tbs-message.
      */
     if (ctx->pctx->pmeth->digest_custom != NULL)
         return ctx->pctx->pmeth->digest_custom(ctx->pctx, ctx);
-
+   
     return 1;
 }
 
diff --git a/crypto/evp/pmeth_lib.c b/crypto/evp/pmeth_lib.c
index 09f7622daa..39daca66f5 100644
--- a/crypto/evp/pmeth_lib.c
+++ b/crypto/evp/pmeth_lib.c
@@ -112,6 +112,11 @@ static const EVP_PKEY_METHOD *standard_methods[] = {
     &p256_sphincsshake256128frobust_pkey_meth,
     &rsa3072_sphincsshake256128frobust_pkey_meth,
 ///// OQS_TEMPLATE_FRAGMENT_LIST_PKEY_METHS_END
+
+#ifndef OPENSSL_NO_COMPOSITE
+    &composite_pkey_meth,
+#endif
+
 };
 
 DECLARE_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_METHOD *, const EVP_PKEY_METHOD *,
diff --git a/crypto/objects/obj_xref.txt b/crypto/objects/obj_xref.txt
index ad32d3463f..be6a14b082 100644
--- a/crypto/objects/obj_xref.txt
+++ b/crypto/objects/obj_xref.txt
@@ -68,6 +68,83 @@ p256_sphincsshake256128frobust	sha512	p256_sphincsshake256128frobust
 rsa3072_sphincsshake256128frobust	sha512	rsa3072_sphincsshake256128frobust
 ##### OQS_TEMPLATE_FRAGMENT_LIST_OQS_SIGS_END
 
+# ============================================
+# Composite Signatures - Digests and Key Types
+# ============================================
+
+AltKeysWithSha256     sha256      composite
+AltKeysWithSha256     sha384      composite
+AltKeysWithSha256     sha512      composite
+AltKeysWithSha3At256  sha3_256    composite
+AltKeysWithSha3At384  sha3_384    composite
+AltKeysWithSha3At512  sha3_512    composite
+
+ComKeysWithSha256     sha256      combined
+ComKeysWithSha256     sha384      combined
+ComKeysWithSha256     sha512      combined
+ComKeysWithSha3At256  sha3_256    combined
+ComKeysWithSha3At384  sha3_384    combined
+ComKeysWithSha3At512  sha3_512    combined
+
+# ======================================
+# PQC Signatures - Digests and Key Types
+# ======================================
+
+FalconWithSha256      sha256      falcon
+FalconWithSha384      sha384      falcon
+FalconWithSha512      sha512      falcon
+
+FalconWithSha3At256   sha3_256    falcon
+FalconWithSha3At384   sha3_384    falcon
+FalconWithSha3At512   sha3_512    falcon
+
+DilithiumWithSha256   sha256      dilithium
+DilithiumWithSha384   sha384      dilithium
+DilithiumWithSha512   sha512      dilithium
+
+DilithiumWithSha3At256 sha3_256    dilithium
+DilithiumWithSha3At384 sha3_384    dilithium
+DilithiumWithSha3At512 sha3_512    dilithium
+
+
+# =====================================
+# PQC Signatures For Specific Key Types
+# =====================================
+
+Falcon512WithSha256      sha256      falcon512
+Falcon512WithSha384      sha384      falcon512
+Falcon512WithSha512      sha512      falcon512
+Falcon512WithSha3At256   sha3_256    falcon512
+Falcon512WithSha3At384   sha3_384    falcon512
+Falcon512WithSha3At512   sha3_512    falcon512
+
+Falcon1024WithSha256      sha256     falcon1024
+Falcon1024WithSha384      sha384     falcon1024
+Falcon1024WithSha512      sha512     falcon1024
+Falcon1024WithSha3At256   sha3_256   falcon1024
+Falcon1024WithSha3At384   sha3_384   falcon1024
+Falcon1024WithSha3At512   sha3_512   falcon1024
+
+Dilithium2WithSha256      sha256     dilithium2
+Dilithium2WithSha384      sha384     dilithium2
+Dilithium2WithSha512      sha512     dilithium2
+Dilithium2WithSha3At256   sha3_256   dilithium2
+Dilithium2WithSha3At384   sha3_384   dilithium2
+Dilithium2WithSha3At512   sha3_512   dilithium2
+
+Dilithium3WithSha256      sha256     dilithium3
+Dilithium3WithSha384      sha384     dilithium3
+Dilithium3WithSha512      sha512     dilithium3
+Dilithium3WithSha3At256   sha3_256   dilithium3
+Dilithium3WithSha3At384   sha3_384   dilithium3
+Dilithium3WithSha3At512   sha3_512   dilithium3
+
+Dilithium5WithSha256      sha256     dilithium5
+Dilithium5WithSha384      sha384     dilithium5
+Dilithium5WithSha512      sha512     dilithium5
+Dilithium5WithSha3At256   sha3_256   dilithium5
+Dilithium5WithSha3At384   sha3_384   dilithium5
+Dilithium5WithSha3At512   sha3_512   dilithium5
 
 # Alternative deprecated OIDs. By using the older "rsa" OID this
 # type will be recognized by not normally used.
diff --git a/crypto/objects/objects.txt b/crypto/objects/objects.txt
index efc1d7962e..8131e5f7f0 100644
--- a/crypto/objects/objects.txt
+++ b/crypto/objects/objects.txt
@@ -1805,3 +1805,98 @@ dstu4145le 2 9 : uacurve9 : DSTU curve 9
 1 3 9999 6 7 2 : p256_sphincsshake256128frobust : p256_sphincsshake256128frobust
 1 3 9999 6 7 3 : rsa3072_sphincsshake256128frobust : rsa3072_sphincsshake256128frobust
 ##### OQS_TEMPLATE_FRAGMENT_ASSIGN_SIG_OIDS_END
+
+# =========================================
+# Composite Crypto and Combined Crypto OIDs
+# =========================================
+#
+# Composite Crypto OID:
+# 1.3.6.1.4.1.18227.2.1
+#
+# CompositeOR Crypto OID:
+# 1.3.6.1.4.1.18227.2.2
+#
+
+1 3 6 1 4 1 18227 : id-pen-openca : OpenCA Labs Private Enterprise Name
+
+id-pen-openca 2 1 : composite : Composite Crypto With Alternative Keys
+
+composite 1 : ALT-SHA256                : AltKeysWithSha256
+composite 2 : ALT-SHA384                : AltKeysWithSha384
+composite 3 : ALT-SHA512                : AltKeysWithSha512
+composite 4 : ALT-SHA3-256              : AltKeysWithSha3At256
+composite 5 : ALT-SHA3-384              : AltKeysWithSha3At384
+composite 6 : ALT-SHA3-512              : AltKeysWithSha3At512
+
+id-pen-openca 2 2 : combined  : Composite Crypto With Combined Keys
+
+combined 1 : COM-SHA256         : ComKeysWithSha256
+combined 2 : COM-SHA384         : ComKeysWithSha384
+combined 3 : COM-SHA512         : ComKeysWithSha512
+combined 4 : COM-SHA3-256       : ComKeysWithSha3At256
+combined 5 : COM-SHA3-384       : ComKeysWithSha3At384
+combined 6 : COM-SHA3-512       : ComKeysWithSha3At512
+
+# ====================
+# Other Signature OIDs
+# ====================
+
+id-pen-openca 3 : openca-pqc : Post Quantum Crypto OIDs
+
+openca-pqc 1  : falcon : Falcon Algorithm Family
+
+falcon 1      : FALCON-SHA256    : FalconWithSha256
+falcon 2      : FALCON-SHA384    : FalconWithSha384
+falcon 3      : FALCON-SHA512    : FalconWithSha512
+falcon 4      : FALCON-SHA3-256  : FalconWithSha3At256
+falcon 5      : FALCON-SHA3-384  : FalconWithSha3At384
+falcon 6      : FALCON-SHA3-512  : FalconWithSha3At512
+
+openca-pqc 2 : dilithium : Dilithium Algorithm Family
+
+dilithium 1  : DILITHIUM-SHA256    : DilithiumWithSha256
+dilithium 2  : DILITHIUM-SHA384    : DilithiumWithSha384
+dilithium 3  : DILITHIUM-SHA512    : DilithiumWithSha512
+dilithium 4  : DILITHIUM-SHA3-256  : DilithiumWithSha3At256
+dilithium 5  : DILITHIUM-SHA3-384  : DilithiumWithSha3At384
+dilithium 6  : DILITHIUM-SHA3-512  : DilithiumWithSha3At512
+
+# ======================================================================================
+# Other Signature OIDs that uses different OIDs for Same Algorithm w/ different strength
+# ======================================================================================
+
+falcon512 1      : FALCON512-SHA256    : Falcon512WithSha256
+falcon512 2      : FALCON512-SHA384    : Falcon512WithSha384
+falcon512 3      : FALCON512-SHA512    : Falcon512WithSha512
+falcon512 4      : FALCON512-SHA3-256  : Falcon512WithSha3At256
+falcon512 5      : FALCON512-SHA3-384  : Falcon512WithSha3At384
+falcon512 6      : FALCON512-SHA3-512  : Falcon512WithSha3At512
+
+falcon1024 1      : FALCON1024-SHA256    : Falcon1024WithSha256
+falcon1024 2      : FALCON1024-SHA384    : Falcon1024WithSha384
+falcon1024 3      : FALCON1024-SHA512    : Falcon1024WithSha512
+falcon1024 4      : FALCON1024-SHA3-256  : Falcon1024WithSha3At256
+falcon1024 5      : FALCON1024-SHA3-384  : Falcon1024WithSha3At384
+falcon1024 6      : FALCON1024-SHA3-512  : Falcon1024WithSha3At512
+
+
+dilithium2 1  : DILITHIUM2-SHA256    : Dilithium2WithSha256
+dilithium2 2  : DILITHIUM2-SHA384    : Dilithium2WithSha384
+dilithium2 3  : DILITHIUM2-SHA512    : Dilithium2WithSha512
+dilithium2 4  : DILITHIUM2-SHA3-256  : Dilithium2WithSha3At256
+dilithium2 5  : DILITHIUM2-SHA3-384  : Dilithium2WithSha3At384
+dilithium2 6  : DILITHIUM2-SHA3-512  : Dilithium2WithSha3At512
+
+dilithium3 1  : DILITHIUM3-SHA256    : Dilithium3WithSha256
+dilithium3 2  : DILITHIUM3-SHA384    : Dilithium3WithSha384
+dilithium3 3  : DILITHIUM3-SHA512    : Dilithium3WithSha512
+dilithium3 4  : DILITHIUM3-SHA3-256  : Dilithium3WithSha3At256
+dilithium3 5  : DILITHIUM3-SHA3-384  : Dilithium3WithSha3At384
+dilithium3 6  : DILITHIUM3-SHA3-512  : Dilithium3WithSha3At512
+
+dilithium5 1  : DILITHIUM5-SHA256    : Dilithium5WithSha256
+dilithium5 2  : DILITHIUM5-SHA384    : Dilithium5WithSha384
+dilithium5 3  : DILITHIUM5-SHA512    : Dilithium5WithSha512
+dilithium5 4  : DILITHIUM5-SHA3-256  : Dilithium5WithSha3At256
+dilithium5 5  : DILITHIUM5-SHA3-384  : Dilithium5WithSha3At384
+dilithium5 6  : DILITHIUM5-SHA3-512  : Dilithium5WithSha3At512
\ No newline at end of file
diff --git a/crypto/x509/x509type.c b/crypto/x509/x509type.c
index 1e7525d270..522e08ebfc 100644
--- a/crypto/x509/x509type.c
+++ b/crypto/x509/x509type.c
@@ -101,6 +101,12 @@ int X509_certificate_type(const X509 *x, const EVP_PKEY *pkey)
     case NID_id_GostR3410_2012_512:
         ret = EVP_PKT_EXCH | EVP_PKT_SIGN;
         break;
+    case NID_combined:
+        ret = EVP_PKT_SIGN;
+        break;
+    case NID_composite:
+        ret = EVP_PKT_SIGN;
+        break;
     default:
         break;
     }
diff --git a/include/crypto/asn1.h b/include/crypto/asn1.h
index 40896eee39..700e0edd99 100644
--- a/include/crypto/asn1.h
+++ b/include/crypto/asn1.h
@@ -130,6 +130,10 @@ extern const EVP_PKEY_ASN1_METHOD sphincsshake256128frobust_asn1_meth;
 extern const EVP_PKEY_ASN1_METHOD p256_sphincsshake256128frobust_asn1_meth;
 extern const EVP_PKEY_ASN1_METHOD rsa3072_sphincsshake256128frobust_asn1_meth;///// OQS_TEMPLATE_FRAGMENT_DEFINE_ASN1_METHS_END
 
+#ifndef OPENSSL_NO_COMPOSITE
+extern const EVP_PKEY_ASN1_METHOD composite_asn1_meth;
+#endif
+
 /*
  * These are used internally in the ASN1_OBJECT to keep track of whether the
  * names and data need to be free()ed
diff --git a/include/crypto/evp.h b/include/crypto/evp.h
index 057e8278ba..7700df3fe4 100644
--- a/include/crypto/evp.h
+++ b/include/crypto/evp.h
@@ -156,6 +156,26 @@ extern const EVP_PKEY_METHOD sphincsshake256128frobust_pkey_meth;
 extern const EVP_PKEY_METHOD p256_sphincsshake256128frobust_pkey_meth;
 extern const EVP_PKEY_METHOD rsa3072_sphincsshake256128frobust_pkey_meth;///// OQS_TEMPLATE_FRAGMENT_DEFINE_EVP_METHS_END
 
+#ifndef OPENSSL_NO_COMPOSITE
+  // Composite Crypto and Composite Alt Crypto
+  extern const EVP_PKEY_METHOD composite_pkey_meth;
+#endif
+
+// ========================
+// Composite Crypto Support
+// ========================
+
+#ifndef OPENSSL_NO_COMPOSITE
+# define EVP_PKEY_COMPOSITE NID_composite
+# define EVP_PKEY_COMBINED NID_combined
+#endif
+
+# define EVP_PKEY_CTRL_COMPOSITE_PUSH    0x201
+# define EVP_PKEY_CTRL_COMPOSITE_POP     0x202
+# define EVP_PKEY_CTRL_COMPOSITE_ADD     0x203
+# define EVP_PKEY_CTRL_COMPOSITE_DEL     0x204
+# define EVP_PKEY_CTRL_COMPOSITE_CLEAR   0x205
+
 struct evp_md_st {
     int type;
     int pkey_type;
@@ -342,6 +362,12 @@ BLOCK_CIPHER_def_ofb(cname, kstruct, nid, key_len, iv_len, cbits, \
 BLOCK_CIPHER_def_ecb(cname, kstruct, nid, block_size, key_len, flags, \
                      init_key, cleanup, set_asn1, get_asn1, ctrl)
 
+
+# ifndef OPENSSL_NO_COMPOSITE
+#  define EVP_PKEY_assign_COMPOSITE(pkey,comp_key) EVP_PKEY_assign((pkey),EVP_PKEY_COMPOSITE,\
+                                        (char *)(comp_key))
+# endif
+
 /*-
 #define BLOCK_CIPHER_defs(cname, kstruct, \
                                 nid, block_size, key_len, iv_len, flags,\
diff --git a/include/openssl/evp.h b/include/openssl/evp.h
index 5375528c1b..bfdc81c96f 100644
--- a/include/openssl/evp.h
+++ b/include/openssl/evp.h
@@ -63,6 +63,21 @@
 # define EVP_PKEY_ED25519 NID_ED25519
 # define EVP_PKEY_X448 NID_X448
 # define EVP_PKEY_ED448 NID_ED448
+
+// ========================
+// Composite Crypto Support
+// ========================
+
+#ifndef OPENSSL_NO_COMPOSITE
+# define EVP_PKEY_COMPOSITE NID_composite
+# define EVP_PKEY_COMBINED NID_combined
+#endif
+
+# define EVP_PKEY_CTRL_COMPOSITE_PUSH    0x201
+# define EVP_PKEY_CTRL_COMPOSITE_POP     0x202
+# define EVP_PKEY_CTRL_COMPOSITE_DEL     0x204
+# define EVP_PKEY_CTRL_COMPOSITE_CLEAR   0x205
+
 ///// OQS_TEMPLATE_FRAGMENT_DEFINE_EVP_PKEYS_START
 # define EVP_PKEY_OQS_SIG_DEFAULT NID_oqs_sig_default
 # define EVP_PKEY_P256_OQS_SIG_DEFAULT NID_p256_oqs_sig_default
@@ -1380,6 +1395,8 @@ void EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD *ameth,
  */
 # define EVP_PKEY_FLAG_SIGCTX_CUSTOM     4
 
+# define EVP_PKEY_FLAG_NO_MD             8
+
 const EVP_PKEY_METHOD *EVP_PKEY_meth_find(int type);
 EVP_PKEY_METHOD *EVP_PKEY_meth_new(int id, int flags);
 void EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,
